<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js"> <!--<![endif]-->
    <head>
        <meta charset=UTF-8"utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
        <title>简约框架参考手册</title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width">
        <link rel="stylesheet" href="../css/style.css">
        <script src="../js/vendor/modernizr-2.6.2.min.js"></script>
    </head>
    <body>
        <!--[if lt IE 7]>
            <p class="chromeframe">You are using an <strong>outdated</strong> browser. Please <a href="#">activate Google Chrome Frame</a> to improve your experience.</p>
        <![endif]-->

        <div class="wrapper">
            <header>
                <h1>简约框架参考手册</h1>
            </header>
            <aside class="sidebar">
<ul>
<li>入门指引

<ul>
<li><a href="../index.htm">简介</a></li>
<li><a href="simpletutorials.htm">简明教程</a></li>
<li><a href="style-guide.htm">代码风格</a></li>
<li><a href="module.htm">模块</a></li>
<li><a href="license.htm">许可</a></li>
</ul></li>

<li>基础模块
<ul>
<li><a href="base.macro.htm">宏</a></li>
<li><a href="base.global.htm">全局变量</a></li>
<li><a href="base.log.htm">日志</a></li>
<li><a href="base.string.htm">字符串</a></li>
<li><a href="base.hashmap.htm">hash map</a></li>
<li><a href="base.timemanager.htm">时间管理器</a></li>
<li><a href="base.tinytimer.htm">小型定时器</a></li>
<li><a href="base.util.htm">工具集</a></li>
</ul></li>

<li>数据库模块
<ul>
<li><a href="db.manager.htm">管理器</a></li>
<li><a href="db.odbc.htm">ODBC</a></li>
</ul></li>

<li>引擎模块
<ul>
<li><a href="engine.kernel.htm">核心</a></li>
<li><a href="engine.thread.htm">线程</a></li>
</ul></li>

<li>事件模块
<ul>
<li><a href="event.manager.htm">管理器</a></li>
</ul></li>

<li>文件模块
<ul>
<li><a href="file.api.htm">系统API</a></li>
<li><a href="file.database.htm">文件数据库</a></li>
<li><a href="file.ini.htm">ini文件</a></li>
</ul></li>

<li>网络模块
<ul>
<li><a href="net.connection.htm">连接</a></li>
<li><a href="net.packet.htm">包</a></li>
<li><a href="net.socket.htm">套接字</a></li>
<li><a href="net.manager.htm">管理器</a></li>
</ul></li>

<li>性能模块
<ul>
<li><a href="performance.eyes.htm">监视器</a></li>
</ul></li>

<li>脚本模块
<ul>
<li><a href="script.cache.htm">缓存</a></li>
<li><a href="script.lua.htm">lua</a></li>
</ul></li>

<li>系统模块
<ul>
<li><a href="sys.memory.htm">内存</a></li>
<li><a href="sys.info.htm">系统信息</a></li>
<li><a href="sys.process.htm">进程</a></li>
<li><a href="sys.thread.htm">线程</a></li>
<li><a href="sys.util.htm">工具集</a></li>
</ul></li>

<li>工具模块
<ul>
<li><a href="util.compressor.htm">压缩模块</a></li>
</ul></li>

</ul>
</aside>

<section class="content">

<h1>base module time manager</h1>

<ul>
<li><a href="#total">总述</a></li>
<li><a href="#macro">宏</a></li>
<li><a href="#init">::init</a></li>
<li><a href="#get_current_time">::get_current_time</a></li>
<li><a href="#get_saved_time">::get_saved_time</a></li>
<li><a href="#get_start_time">::get_start_time</a></li>
<li><a href="#getsingleton">::getsingleton</a></li>
<li><a href="#getsingleton_pointer">::getsingleton_pointer</a></li>
<li><a href="#reset_time">::reset_time</a></li>
<li><a href="#get_ansi_time">::get_ansi_time</a></li>
<li><a href="#get_ctime">::get_ctime</a></li>
<li><a href="#get_tm">::get_tm</a></li>
<li><a href="#get_full_format_time">::get_full_format_time</a></li>
<li><a href="#get_year">::get_year</a></li>
<li><a href="#get_month">::get_month</a></li>
<li><a href="#get_day">::get_day</a></li>
<li><a href="#get_hour">::get_hour</a></li>
<li><a href="#get_minute">::get_minute</a></li>
<li><a href="#get_second">::get_second</a></li>
<li><a href="#get_week">::get_week</a></li>
<li><a href="#tm_todword">::tm_todword</a></li>
<li><a href="#dword_totm">::dword_totm</a></li>
<li><a href="#diff_dword_time">::diff_dword_time</a></li>
<li><a href="#diff_day_count">::diff_day_count</a></li>
<li><a href="#get_day_time">::get_day_time</a></li>
<li><a href="#get_current_date">::get_current_date</a></li>
<li><a href="#get_run_time">::get_run_time</a></li>
<li><a href="#diff_time">::diff_time</a></li>
<li><a href="#time_totm">::time_totm</a></li>
<li><a href="#tm_totime">::tm_totime</a></li>
<li><a href="#get_days">::get_days</a></li>
<li><a href="#get_hours">::get_hours</a></li>
<li><a href="#get_weeks">::get_weeks</a></li>
</ul>

<p><a name="total"></a></p>

<h2>总述</h2>

<p>时间管理器提供了各种时间获取的方法。</p>

<p><a name="macro"></a></p>

<h2>宏</h2>
<blockquote>
<p>TIME_MANAGER_POINTER</p>
<p>由于时间管理器为单例，每个应用里只存在一个，所以在这里提供了一个获取时间管理器指针的宏。</p>
</blockquote>

<p><b>Example #1 TIME_MANAGER_POINTER 范例</b></p>

<pre><code>
#include "pf/base/time_manager.h"                                                  
#include "main.h"                                                                  
                                                                                   
int32_t main(int32_t argc, char * argv[]) {                                        
  DEBUGPRINTF("time manager is %sactive", TIME_MANAGER_POINTER ? "" : "not ");  
  if (!TIME_MANAGER_POINTER) g_time_manager = new pf_base::TimeManager;            
  DEBUGPRINTF("time manager is %sactive", TIME_MANAGER_POINTER ? "" : "not ");  
  return 0;                                                                        
}     
</code></pre>
<p>以上例程的输出类似于：</p>
<p>
<font color="green">time manager is not active</font> <br />
<font color="green">time manager is active</font>
</p>

<p><a name="init"></a></p>

<h2>::init</h2>

<blockquote>
<p>bool init(); </p>
<p>描述：时间管理器初始化函数，只有当时间管理器正确初始化后才能正常工作，切记。</p>
<p>参数：</p>
<p>无</p>
<p>返回值：bool 成功返回true，失败返回false</p>
</blockquote>

<p><b>Example #1 init 范例</b></p>

<pre><code>
#include "pf/base/time_manager.h"                                                  
#include "main.h"                                                                  
                                                                                   
int32_t main(int32_t argc, char * argv[]) {                                        
  bool result = true;                                                           
  if (!TIME_MANAGER_POINTER) g_time_manager = new pf_base::TimeManager;            
  result = TIME_MANAGER_POINTER->init();                                           
  DEBUGPRINTF("time manager init %s", result ? "success" : "failed");           
  return 0;                                                                     
}       
</code></pre>
<p>以上例程的输出类似于：</p>
<p>
<font color="green">time manager init success</font>
</p>

<p><a name="get_current_time"></a></p>

<h2>::get_current_time</h2>

<blockquote>
<p>uint32_t get_current_time(); </p>
<p>描述：取从程序启动到现在经历的时间(ms)。</p>
<p>参数：</p>
<p>无</p>
<p>返回值：uint32_t</p>
</blockquote>

<p><b>Example #1 get_current_time 范例</b></p>

<pre><code>
#include "pf/base/time_manager.h"                                                  
#include "pf/base/util.h"                                                       
#include "main.h"                                                                  
                                                                                   
int32_t main(int32_t argc, char * argv[]) {                                        
  bool result = true;                                                           
  if (!TIME_MANAGER_POINTER) g_time_manager = new pf_base::TimeManager;            
  result = TIME_MANAGER_POINTER->init();                                           
  pf_base::util::sleep(10);                                                     
  DEBUGPRINTF("time: %d", TIME_MANAGER_POINTER->get_current_time());            
  return 0;                                                                     
}       
</code></pre>
<p>以上例程的输出类似于（可能会有1-2毫秒的偏差）：</p>
<p>
<font color="green">time: 10</font>
</p>

<p><a name="get_saved_time"></a></p>

<h2>::get_saved_time</h2>

<blockquote>
<p>uint32_t get_saved_time(); </p>
<p>描述：接口预留。</p>
<p>参数：</p>
<p>无</p>
<p>返回值：uint32_t</p>
</blockquote>

<p><b>Example #1 get_saved_time 范例</b></p>

<pre><code>
#include "pf/base/time_manager.h"                                                  
#include "pf/base/util.h"                                                       
#include "main.h"                                                                  
                                                                                   
int32_t main(int32_t argc, char * argv[]) {                                        
  bool result = true;                                                           
  if (!TIME_MANAGER_POINTER) g_time_manager = new pf_base::TimeManager;            
  result = TIME_MANAGER_POINTER->init();                                           
  pf_base::util::sleep(10);                                                     
  //DEBUGPRINTF("time: %d", TIME_MANAGER_POINTER->get_saved_time());            
  return 0;                                                                     
}       
</code></pre>
<p>以上例程的输出类似于：</p>
<p>
无
</p>

<p><a name="get_start_time"></a></p>

<h2>::get_start_time</h2>

<blockquote>
<p>uint32_t get_start_time(); </p>
<p>描述：接口预留。</p>
<p>参数：</p>
<p>无</p>
<p>返回值：uint32_t</p>
</blockquote>

<p><b>Example #1 get_start_time 范例</b></p>

<pre><code>
#include "pf/base/time_manager.h"                                                  
#include "pf/base/util.h"                                                       
#include "main.h"                                                                  
                                                                                   
int32_t main(int32_t argc, char * argv[]) {                                        
  bool result = true;                                                           
  if (!TIME_MANAGER_POINTER) g_time_manager = new pf_base::TimeManager;            
  result = TIME_MANAGER_POINTER->init();                                           
  pf_base::util::sleep(10);                                                     
  //DEBUGPRINTF("time: %d", TIME_MANAGER_POINTER->get_start_time());            
  return 0;                                                                     
}       
</code></pre>
<p>以上例程的输出类似于：</p>
<p>
无
</p>

<p><a name="getsingleton"></a></p>

<h2>::getsingleton</h2>

<blockquote>
<p>static TimeManager &getsingleton(); </p>
<p>描述：获取时间管理器对象（单例）。</p>
<p>参数：</p>
<p>无</p>
<p>返回值：TimeManager &</p>
</blockquote>

<p><b>Example #1 getsingleton 范例</b></p>

<pre><code>
#include "pf/base/time_manager.h"                                                  
#include "pf/base/util.h"                                                       
#include "main.h"                                                                  
                                                                                   
int32_t main(int32_t argc, char * argv[]) {                                        
  bool result = true;                                                           
  if (!TIME_MANAGER_POINTER) g_time_manager = new pf_base::TimeManager;            
  result = TIME_MANAGER_POINTER->init();                                           
  DEBUGPRINTF("time: %d",                                                       
              pf_base::TimeManager::getsingleton().get_current_time());         
  return 0;                                                                     
}      
</code></pre>
<p>以上例程的输出类似于（可能会有1-2毫秒的偏差）：</p>
<p>
<font color="green">time: 1</font>
</p>

<p><a name="getsingleton_pointer"></a></p>

<h2>::getsingleton_pointer</h2>

<blockquote>
<p>static TimeManager &getsingleton_pointer(); </p>
<p>描述：获取时间管理器对象指针（单例）。</p>
<p>参数：</p>
<p>无</p>
<p>返回值：TimeManager *</p>
</blockquote>

<p><b>Example #1 getsingleton_pointer 范例</b></p>

<pre><code>
#include "pf/base/time_manager.h"                                                  
#include "pf/base/util.h"                                                       
#include "main.h"                                                                  
                                                                                   
int32_t main(int32_t argc, char * argv[]) {                                        
  bool result = true;                                                           
  if (!TIME_MANAGER_POINTER) g_time_manager = new pf_base::TimeManager;            
  result = TIME_MANAGER_POINTER->init();                                           
  DEBUGPRINTF("time: %d",                                                       
              pf_base::TimeManager::getsingleton_pointer()->get_current_time());         
  return 0;                                                                     
}      
</code></pre>
<p>以上例程的输出类似于（可能会有1-2毫秒的偏差）：</p>
<p>
<font color="green">time: 1</font>
</p>

<nav>
	<a href="base.hashmap.htm">hash map</a> |
	<a href="base.tinytimer.htm">小型定时器 </a>
</nav>
<footer>
    <p><a href="#">Dayle Rees</a>.</p>
</footer>
            
            
</section>
  <div class="clearfix"></div>
</div>

        <script src="../../ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
        <script>window.jQuery || document.write('<script src="../js/vendor/jquery-1.8.2.min.js"><\/script>')</script>
        <script src="../../checkout.stripe.com/v2/checkout.js"></script>
        <script src="../js/vendor/prettify.js"></script>
        <script src="../js/plugins.js"></script>
        <script src="../js/main.js"></script>

        <script type="text/javascript">

          var _gaq = _gaq || [];
          _gaq.push(['_setAccount', 'UA-37898177-1']);
          _gaq.push(['_trackPageview']);

          (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www/') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
          })();

        </script>
    </body>
</html>